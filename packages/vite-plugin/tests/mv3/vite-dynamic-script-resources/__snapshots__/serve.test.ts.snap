// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`serve fs output: _00 manifest.json 1`] = `
Object {
  "background": Object {
    "service_worker": "service-worker-loader.js",
    "type": "module",
  },
  "description": "test extension",
  "manifest_version": 3,
  "name": "test extension",
  "version": "1.0.0",
  "web_accessible_resources": Array [
    Object {
      "matches": Array [
        "<all_urls>",
      ],
      "resources": Array [
        "*",
        "**/*",
      ],
      "use_dynamic_url": true,
    },
  ],
}
`;

exports[`serve fs output: _01 output files 1`] = `
Array [
  "assets/content-script-loader.content1.js.js",
  "assets/content-script-loader.content2.js.js",
  "assets/crx-client-port.js",
  "assets/precontroller.js.js",
  "assets/webcomponents-custom-elements-z7FmG.js",
  "manifest.json",
  "service-worker-loader.js",
  "src/content1.ts.js",
  "src/content2.ts.js",
  "src/font.otf",
  "src/font.otf.js",
  "src/image.png",
  "src/image.png.js",
  "src/script.ts.js",
  "src/script.ts2.js",
  "vendor/vite-client.mjs.js",
  "vendor/vite-env.mjs.js",
]
`;

exports[`serve fs output: assets/content-script-loader.content1.js.js 1`] = `
"(function () {
  'use strict';

  (async () => {
    if (\\"\\")
      await import(
        /* @vite-ignore */
        chrome.runtime.getURL(\\"\\")
      );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"vendor/vite-client.mjs.js\\")
    );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"src/content1.ts.js\\")
    );
  })().catch(console.error);

})();
"
`;

exports[`serve fs output: assets/content-script-loader.content2.js.js 1`] = `
"(function () {
  'use strict';

  (async () => {
    if (\\"\\")
      await import(
        /* @vite-ignore */
        chrome.runtime.getURL(\\"\\")
      );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"vendor/vite-client.mjs.js\\")
    );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"src/content2.ts.js\\")
    );
  })().catch(console.error);

})();
"
`;

exports[`serve fs output: assets/crx-client-port.js 1`] = `
"function isCrxHMRPayload(x) {
  return x.type === \\"custom\\" && x.event.startsWith(\\"crx:\\");
}
class HMRPort {
  port;
  callbacks = /* @__PURE__ */ new Map();
  constructor() {
    setInterval(() => {
      try {
        this.port?.postMessage({ data: \\"ping\\" });
      } catch (error) {
        if (error instanceof Error && error.message.includes(\\"Extension context invalidated.\\")) {
          location.reload();
        } else
          throw error;
      }
    }, 5000);
    setInterval(this.initPort, 5 * 60 * 1e3);
    this.initPort();
  }
  initPort = () => {
    this.port?.disconnect();
    this.port = chrome.runtime.connect({ name: \\"@crx/client\\" });
    this.port.onDisconnect.addListener(this.handleDisconnect.bind(this));
    this.port.onMessage.addListener(this.handleMessage.bind(this));
    this.port.postMessage({ type: \\"connected\\" });
  };
  handleDisconnect = () => {
    if (this.callbacks.has(\\"close\\"))
      for (const cb of this.callbacks.get(\\"close\\")) {
        cb({ wasClean: true });
      }
  };
  handleMessage = (message) => {
    const forward = (data) => {
      if (this.callbacks.has(\\"message\\"))
        for (const cb of this.callbacks.get(\\"message\\")) {
          cb({ data });
        }
    };
    const payload = JSON.parse(message.data);
    if (isCrxHMRPayload(payload)) {
      if (payload.event === \\"crx:runtime-reload\\") {
        console.log(\\"[crx] runtime reload\\");
        setTimeout(() => location.reload(), 500);
      } else {
        forward(JSON.stringify(payload.data));
      }
    } else {
      forward(message.data);
    }
  };
  addEventListener = (event, callback) => {
    const cbs = this.callbacks.get(event) ?? /* @__PURE__ */ new Set();
    cbs.add(callback);
    this.callbacks.set(event, cbs);
  };
  send = (data) => {
    if (this.port)
      this.port.postMessage({ data });
    else
      throw new Error(\\"HMRPort is not initialized\\");
  };
}

export { HMRPort };
"
`;

exports[`serve fs output: assets/precontroller.js.js 1`] = `
"const id = setInterval(() => location.reload(), 100);
setTimeout(() => clearInterval(id), 5e3);
"
`;

exports[`serve fs output: service-worker-loader.js 1`] = `
"import 'http://localhost:3000/crx-client-worker';
import 'http://localhost:3000/src/background.ts';
"
`;

exports[`serve fs output: src/content1.ts.js 1`] = `
"import script from './script.ts.js';

console.log(\\"content.ts\\", { script });
"
`;

exports[`serve fs output: src/content2.ts.js 1`] = `
"import font from './font.otf.js';

console.log(\\"content2.ts\\", { font });
"
`;

exports[`serve fs output: src/font.otf.js 1`] = `
"var font = \\"/src/font.otf\\";

export { font as default };
"
`;

exports[`serve fs output: src/image.png.js 1`] = `
"var icon = \\"/src/image.png\\";

export { icon as default };
"
`;

exports[`serve fs output: src/script.ts.js 1`] = `
"var script = \\"/src/script.ts2.js\\";

export { script as default };
"
`;

exports[`serve fs output: src/script.ts2.js 1`] = `
"import icon from './image.png.js';

console.log(\\"main world script\\", { icon });
"
`;
