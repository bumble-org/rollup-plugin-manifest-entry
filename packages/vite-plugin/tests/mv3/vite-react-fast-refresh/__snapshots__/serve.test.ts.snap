// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`serve fs output: _00 manifest.json 1`] = `
Object {
  "action": Object {
    "default_popup": "src/popup.html",
  },
  "background": Object {
    "service_worker": "service-worker-loader.js",
    "type": "module",
  },
  "content_scripts": Array [
    Object {
      "js": Array [
        "assets/content-script-loader.content.tsx.js.js",
      ],
      "matches": Array [
        "http://*/*",
      ],
    },
  ],
  "manifest_version": 3,
  "name": "test extension",
  "version": "1.0.0",
  "web_accessible_resources": Array [
    Object {
      "matches": Array [
        "<all_urls>",
      ],
      "resources": Array [
        "*",
        "**/*",
      ],
      "use_dynamic_url": true,
    },
  ],
}
`;

exports[`serve fs output: _01 output files 1`] = `
Array [
  "assets/content-script-loader.content.tsx.js.js",
  "assets/content-script-preamble.js.js",
  "assets/crx-client-port.js",
  "assets/precontroller.js.js",
  "assets/webcomponents-custom-elements-z7FmG.js",
  "manifest.json",
  "service-worker-loader.js",
  "src/App.tsx.js",
  "src/content.tsx.js",
  "src/popup.html",
  "vendor/deps/chunk-EC6NZEJ6.js",
  "vendor/deps/react-dom.js",
  "vendor/deps/react_jsx-dev-runtime.js",
  "vendor/react-refresh.js",
  "vendor/vite-client.mjs.js",
  "vendor/vite-env.mjs.js",
]
`;

exports[`serve fs output: _02 optimized deps 1`] = `
Set {
  "src/content.tsx",
  "src/popup.html",
}
`;

exports[`serve fs output: assets/content-script-loader.content.tsx.js.js 1`] = `
"(function () {
  'use strict';

  (async () => {
    if (\\"assets/content-script-preamble.js.js\\")
      await import(
        /* @vite-ignore */
        chrome.runtime.getURL(\\"assets/content-script-preamble.js.js\\")
      );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"vendor/vite-client.mjs.js\\")
    );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"src/content.tsx.js\\")
    );
  })().catch(console.error);

})();
"
`;

exports[`serve fs output: assets/content-script-preamble.js.js 1`] = `
"import exports from '../vendor/react-refresh.js';

exports.injectIntoGlobalHook(window);
window.$RefreshReg$ = () => {};
window.$RefreshSig$ = () => (type) => type;
window.__vite_plugin_react_preamble_installed__ = true;
"
`;

exports[`serve fs output: assets/crx-client-port.js 1`] = `
"function isCrxHMRPayload(x) {
  return x.type === \\"custom\\" && x.event.startsWith(\\"crx:\\");
}
class HMRPort {
  port;
  callbacks = /* @__PURE__ */ new Map();
  constructor() {
    setInterval(() => {
      try {
        this.port?.postMessage({ data: \\"ping\\" });
      } catch (error) {
        if (error instanceof Error && error.message.includes(\\"Extension context invalidated.\\")) {
          location.reload();
        } else
          throw error;
      }
    }, 5000);
    setInterval(this.initPort, 5 * 60 * 1e3);
    this.initPort();
  }
  initPort = () => {
    this.port?.disconnect();
    this.port = chrome.runtime.connect({ name: \\"@crx/client\\" });
    this.port.onDisconnect.addListener(this.handleDisconnect.bind(this));
    this.port.onMessage.addListener(this.handleMessage.bind(this));
    this.port.postMessage({ type: \\"connected\\" });
  };
  handleDisconnect = () => {
    if (this.callbacks.has(\\"close\\"))
      for (const cb of this.callbacks.get(\\"close\\")) {
        cb({ wasClean: true });
      }
  };
  handleMessage = (message) => {
    const forward = (data) => {
      if (this.callbacks.has(\\"message\\"))
        for (const cb of this.callbacks.get(\\"message\\")) {
          cb({ data });
        }
    };
    const payload = JSON.parse(message.data);
    if (isCrxHMRPayload(payload)) {
      if (payload.event === \\"crx:runtime-reload\\") {
        console.log(\\"[crx] runtime reload\\");
        setTimeout(() => location.reload(), 500);
      } else {
        forward(JSON.stringify(payload.data));
      }
    } else {
      forward(message.data);
    }
  };
  addEventListener = (event, callback) => {
    const cbs = this.callbacks.get(event) ?? /* @__PURE__ */ new Set();
    cbs.add(callback);
    this.callbacks.set(event, cbs);
  };
  send = (data) => {
    if (this.port)
      this.port.postMessage({ data });
    else
      throw new Error(\\"HMRPort is not initialized\\");
  };
}

export { HMRPort };
"
`;

exports[`serve fs output: assets/precontroller.js.js 1`] = `
"const id = setInterval(() => location.reload(), 100);
setTimeout(() => clearInterval(id), 5e3);
"
`;

exports[`serve fs output: service-worker-loader.js 1`] = `
"import 'http:/localhost:3000/@vite/env';
import 'http://localhost:3000/crx-client-worker';
"
`;

exports[`serve fs output: src/App.tsx.js 1`] = `
"import { createHotContext } from '../vendor/vite-client.mjs.js';
import exports from '../vendor/react-refresh.js';
import react_jsx_dev_runtime_default from '../vendor/deps/react_jsx-dev-runtime.js';

import.meta.hot = createHotContext(\\"/src/App.tsx.js\\");let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error(\\"@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201\\");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    exports.register(type, \\"<root>/src/App.tsx \\" + id);
  };
  window.$RefreshSig$ = exports.createSignatureFunctionForTransform;
}
var _jsxFileName = \\"<root>/src/App.tsx\\";
 const _jsxDEV = react_jsx_dev_runtime_default[\\"jsxDEV\\"];
const App = () => {
  return /* @__PURE__ */ _jsxDEV(\\"div\\", {
    children: [/* @__PURE__ */ _jsxDEV(\\"h1\\", {
      children: \\"Popup Page\\"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 7
    }, this), /* @__PURE__ */ _jsxDEV(\\"p\\", {
      children: \\"If you are seeing this, React is working!\\"
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 7,
      columnNumber: 7
    }, this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 5,
    columnNumber: 5
  }, this);
};
_c = App;
var _c;
$RefreshReg$(_c, \\"App\\");
if (import.meta.hot) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
  import.meta.hot.accept();
  if (!window.__vite_plugin_react_timeout) {
    window.__vite_plugin_react_timeout = setTimeout(() => {
      window.__vite_plugin_react_timeout = 0;
      exports.performReactRefresh();
    }, 30);
  }
}

export { App as default };
"
`;

exports[`serve fs output: src/content.tsx.js 1`] = `
"import react_dom_default from '../vendor/deps/react-dom.js';
import App from './App.tsx.js';
import react_jsx_dev_runtime_default from '../vendor/deps/react_jsx-dev-runtime.js';

var _jsxFileName = \\"<root>/src/content.tsx\\";
 const render = react_dom_default[\\"render\\"];
 const _jsxDEV = react_jsx_dev_runtime_default[\\"jsxDEV\\"];
console.log(\\"content script\\");
const root = document.createElement(\\"div\\");
root.id = \\"root\\";
document.body.append(root);
render(/* @__PURE__ */ _jsxDEV(App, {}, void 0, false, {
  fileName: _jsxFileName,
  lineNumber: 10,
  columnNumber: 8
}, this), root);
"
`;

exports[`serve fs output: src/popup.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <title>Waiting for the extension service worker...</title>
    <script src=\\"/assets/precontroller.js.js\\"></script>
  </head>
  <body>
    <h1>Waiting for service worker</h1>

    <p>
      If you see this message, it means the service worker has not loaded fully.
    </p>

    <p>This page is never added in production.</p>
  </body>
</html>
"
`;
