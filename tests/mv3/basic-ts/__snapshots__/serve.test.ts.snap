// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`serve fs output: 00 manifest.json 1`] = `
Object {
  "action": Object {
    "default_popup": "src/popup.html",
  },
  "background": Object {
    "service_worker": "service-worker-loader.js",
    "type": "module",
  },
  "content_scripts": Array [
    Object {
      "js": Array [
        "assets/content-script-loader.content.ts.hash.hash.js",
      ],
      "matches": Array [
        "https://*/*",
        "http://*/*",
      ],
    },
  ],
  "description": "test extension",
  "manifest_version": 3,
  "name": "test extension",
  "version": "0.1.0",
  "web_accessible_resources": Array [
    Object {
      "matches": Array [
        "<all_urls>",
      ],
      "resources": Array [
        "*",
        "**/*",
      ],
      "use_dynamic_url": true,
    },
  ],
}
`;

exports[`serve fs output: 01 output files 1`] = `
Array [
  "assets/content-script-hmr-client.hash.js",
  "assets/content-script-loader.content.ts.hash.hash.js",
  "assets/content.ts.hash.js",
  "assets/precontroller.hash.js",
  "manifest.json",
  "service-worker-loader.js",
  "src/popup.html",
]
`;

exports[`serve fs output: assets/content.ts.hash.js 1`] = `
"console.log(\\"content script\\");
"
`;

exports[`serve fs output: assets/content-script-hmr-client.hash.js 1`] = `
"let port;
setupPort();
setInterval(() => port?.postMessage({ type: \\"ping\\" }), 5e3);
setInterval(setupPort, 5 * 60 * 1e3);
function setupPort() {
  port?.disconnect();
  port = chrome.runtime.connect({ name: \\"@crx/client\\" });
  port.postMessage({ type: \\"connected\\", url: import.meta.url });
  port.onMessage.addListener(handlePortMessage);
}
function handlePortMessage(payload) {
  switch (payload.type) {
    case \\"connected\\":
      console.log(\\"[vite-crx] connected.\\");
      break;
    case \\"custom\\":
      if (payload.event === \\"runtime-reload\\")
        handleRuntimeReload();
      break;
    default:
      console.log(\\"[vite]\\", payload);
      break;
  }
}
function handleRuntimeReload() {
  console.log(\\"[vite-crx] runtime reload.\\");
  setTimeout(() => location.reload(), 1e3);
}
"
`;

exports[`serve fs output: assets/content-script-loader.content.ts.hash.hash.js 1`] = `
"(function () {
  'use strict';

  (async () => {
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"assets/content-script-hmr-client.hash.js\\")
    );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"assets/content.ts.hash.js\\")
    );
  })().catch(console.error);

})();
"
`;

exports[`serve fs output: assets/precontroller.hash.js 1`] = `
"setTimeout(() => location.reload(), 100);
"
`;

exports[`serve fs output: service-worker-loader.js 1`] = `
"import 'http://localhost:3000/@crx/worker-client';
import 'http://localhost:3000/src/background.ts';
"
`;

exports[`serve fs output: src/popup.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <title>Waiting for CRX service worker...</title>
    <!--
      Chrome requires an HTML page for every page in the manifest.
      
      The service worker reroutes requests for HTML to the dev server,
      so this isn't used unless the background opens a page immediately
      after a full extension reload. In that case, this script will
      reload the page once the service worker is ready.
    -->
    <script src=\\"/assets/precontroller.hash.js\\"></script>
  </head>
  <body>
    <p>Waiting for CRX service worker...</p>
  </body>
</html>
"
`;
