// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`manifest vs output: 00 - manifest 1`] = `
Object {
  "background": Object {
    "scripts": Array [
      "background.esm-wrapper.js",
    ],
  },
  "content_scripts": Array [
    Object {
      "js": Array [
        "assets/content.esm-wrapper-a6ac6bbe.js",
      ],
      "matches": Array [
        "https://www.google.com/*",
      ],
    },
  ],
  "description": "properties from options.extendManifest are preferred",
  "icons": Object {
    "128": "images/icon-main-128.png",
    "16": "images/icon-main-16.png",
    "48": "images/icon-main-48.png",
  },
  "manifest_version": 2,
  "name": "options.extendManifest as object",
  "permissions": Array [
    "storage",
    "contextMenus",
  ],
  "version": "1.0.0",
  "web_accessible_resources": Array [
    "content.js",
  ],
}
`;

exports[`manifest vs output: 01 - files from manifest 1`] = `
Object {
  "CSS": Array [],
  "HTML": Array [],
  "IMAGE": Array [
    "images/icon-main-16.png",
    "images/icon-main-48.png",
    "images/icon-main-128.png",
  ],
  "JSON": Array [],
  "SCRIPT_BACKGROUND": Array [
    "background.esm-wrapper.js",
  ],
  "SCRIPT_DECLARED": Array [
    "assets/content.esm-wrapper-a6ac6bbe.js",
  ],
}
`;

exports[`manifest vs output: 02 - files from output 1`] = `
Array [
  "assets/content.esm-wrapper-a6ac6bbe.js",
  "background.esm-wrapper.js",
  "background.js",
  "content.js",
  "images/icon-main-128.png",
  "images/icon-main-16.png",
  "images/icon-main-48.png",
  "manifest.json",
  "modules/imported-bc5aae30.js",
]
`;

exports[`manifest vs output: 03 - manifest files match output 1`] = `
Object {
  "assets/content.esm-wrapper-a6ac6bbe.js": true,
  "background.esm-wrapper.js": true,
  "images/icon-main-128.png": true,
  "images/icon-main-16.png": true,
  "images/icon-main-48.png": true,
}
`;

exports[`manifest vs output: assets/content.esm-wrapper-a6ac6bbe.js 1`] = `
"(function () {
  'use strict';

  const importPath = \\"content.js\\";

  const url = chrome.runtime.getURL(importPath);
  import(
    /* @vite-ignore */
    url
  ).catch((err) => {
    console.warn(\`Could not import \${importPath} from \${chrome.runtime.getManifest().name}\`);
    console.error(err);
  });

})();
"
`;

exports[`manifest vs output: background.esm-wrapper.js 1`] = `
"(function () {
  'use strict';

  function getDeepMatches(object, pred, excludeKeys) {
    const keys = typeof object === \\"object\\" && object ? Object.keys(object) : [];
    return keys.length ? keys.filter((key) => !excludeKeys.includes(key)).reduce((r, key) => {
      const target = object[key];
      if (target && pred(target)) {
        return [...r, target];
      } else {
        return [
          ...r,
          ...getDeepMatches(target, pred, excludeKeys)
        ];
      }
    }, []) : [];
  }

  const importPath = \\"./background.js\\";

  const events = getDeepMatches(chrome, (x) => typeof x === \\"object\\" && \\"addListener\\" in x, [\\"webRequest\\", \\"extension\\"]);
  const triggerEvents = captureEvents(events);
  import(importPath).then(async () => {
    triggerEvents();
  });
  function captureEvents(events2) {
    const captured = events2.map(captureEvent);
    return () => captured.forEach((t) => t());
    function captureEvent(event) {
      let isCapturePhase = true;
      const callbacks = /* @__PURE__ */ new Map();
      const eventArgs = /* @__PURE__ */ new Set();
      event.addListener(handleEvent);
      function handleEvent(...args) {
        if (isCapturePhase) {
          eventArgs.add(args);
          if (typeof args[2] === \\"function\\") {
            return true;
          } else {
            return false;
          }
        } else {
          return callListeners(...args);
        }
      }
      function callListeners(...args) {
        let isAsyncCallback = false;
        callbacks.forEach((options, cb) => {
          try {
            isAsyncCallback = cb(...args) || isAsyncCallback;
          } catch (error) {
            console.error(error);
          }
        });
        if (!isAsyncCallback && typeof args[2] === \\"function\\") {
          args[2]();
        }
        return isAsyncCallback;
      }
      function triggerEvents2() {
        eventArgs.forEach((args) => {
          callListeners(...args);
        });
        isCapturePhase = false;
        eventArgs.clear();
      }
      event.addListener = function addListener(cb, ...options) {
        callbacks.set(cb, options);
      };
      event.hasListeners = function hasListeners() {
        return callbacks.size > 0;
      };
      event.hasListener = function hasListener(cb) {
        return callbacks.has(cb);
      };
      event.removeListener = function removeListener(cb) {
        callbacks.delete(cb);
      };
      event.__isCapturedEvent = true;
      return triggerEvents2;
    }
  }

})();
"
`;

exports[`manifest vs output: background.js 1`] = `
"import { x } from './modules/imported-bc5aae30.js';

console.log(x);

console.log('background.js');

chrome.storage.local.clear();
"
`;

exports[`manifest vs output: content.js 1`] = `
"import { x } from './modules/imported-bc5aae30.js';

console.log(x);

console.log('content.js');

chrome.contextMenus.removeAll();
"
`;

exports[`manifest vs output: modules/imported-bc5aae30.js 1`] = `
"const x = 'x';

export { x };
"
`;
