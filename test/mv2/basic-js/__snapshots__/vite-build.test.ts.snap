// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`manifest vs output: 00 - manifest 1`] = `
Object {
  "background": Object {
    "scripts": Array [
      "background.esm-wrapper.js",
    ],
  },
  "browser_action": Object {
    "default_popup": "popup.html",
  },
  "content_scripts": Array [
    Object {
      "js": Array [
        "assets/content.esm-wrapper-a6ac6bbe.js",
      ],
      "matches": Array [
        "https://a.com/*",
        "http://b.com/*",
      ],
    },
  ],
  "description": "integration tests",
  "manifest_version": 2,
  "name": "Test",
  "permissions": Array [],
  "version": "1.0.0",
  "web_accessible_resources": Array [
    "content.js",
  ],
}
`;

exports[`manifest vs output: 01 - files from manifest 1`] = `
Object {
  "CSS": Array [],
  "HTML": Array [
    "popup.html",
  ],
  "IMAGE": Array [],
  "JSON": Array [],
  "SCRIPT_BACKGROUND": Array [
    "background.esm-wrapper.js",
  ],
  "SCRIPT_DECLARED": Array [
    "assets/content.esm-wrapper-a6ac6bbe.js",
  ],
}
`;

exports[`manifest vs output: 02 - files from output 1`] = `
Array [
  "assets/content.esm-wrapper-a6ac6bbe.js",
  "background.esm-wrapper.js",
  "background.js",
  "content.js",
  "manifest.json",
  "popup.html",
  "popup.js",
  "vendor chunk",
]
`;

exports[`manifest vs output: 03 - manifest files match output 1`] = `
Object {
  "assets/content.esm-wrapper-a6ac6bbe.js": true,
  "background.esm-wrapper.js": true,
  "popup.html": true,
}
`;

exports[`manifest vs output: assets/content.esm-wrapper-a6ac6bbe.js 1`] = `
"(function () {
  'use strict';

  const importPath = \\"content.js\\";

  const url = chrome.runtime.getURL(importPath);
  import(
    /* @vite-ignore */
    url
  ).catch((err) => {
    console.warn(\`Could not import \${importPath} from \${chrome.runtime.getManifest().name}\`);
    console.error(err);
  });

})();
"
`;

exports[`manifest vs output: background.esm-wrapper.js 1`] = `
"(function () {
  'use strict';

  function getDeepMatches(object, pred, excludeKeys) {
    const keys = typeof object === \\"object\\" && object ? Object.keys(object) : [];
    return keys.length ? keys.filter((key) => !excludeKeys.includes(key)).reduce((r, key) => {
      const target = object[key];
      if (target && pred(target)) {
        return [...r, target];
      } else {
        return [
          ...r,
          ...getDeepMatches(target, pred, excludeKeys)
        ];
      }
    }, []) : [];
  }

  const importPath = \\"./background.js\\";

  const events = getDeepMatches(chrome, (x) => typeof x === \\"object\\" && \\"addListener\\" in x, [\\"webRequest\\", \\"extension\\"]);
  const triggerEvents = captureEvents(events);
  import(importPath).then(async () => {
    triggerEvents();
  });
  function captureEvents(events2) {
    const captured = events2.map(captureEvent);
    return () => captured.forEach((t) => t());
    function captureEvent(event) {
      let isCapturePhase = true;
      const callbacks = /* @__PURE__ */ new Map();
      const eventArgs = /* @__PURE__ */ new Set();
      event.addListener(handleEvent);
      function handleEvent(...args) {
        if (isCapturePhase) {
          eventArgs.add(args);
          if (typeof args[2] === \\"function\\") {
            return true;
          } else {
            return false;
          }
        } else {
          return callListeners(...args);
        }
      }
      function callListeners(...args) {
        let isAsyncCallback = false;
        callbacks.forEach((options, cb) => {
          try {
            isAsyncCallback = cb(...args) || isAsyncCallback;
          } catch (error) {
            console.error(error);
          }
        });
        if (!isAsyncCallback && typeof args[2] === \\"function\\") {
          args[2]();
        }
        return isAsyncCallback;
      }
      function triggerEvents2() {
        eventArgs.forEach((args) => {
          callListeners(...args);
        });
        isCapturePhase = false;
        eventArgs.clear();
      }
      event.addListener = function addListener(cb, ...options) {
        callbacks.set(cb, options);
      };
      event.hasListeners = function hasListeners() {
        return callbacks.size > 0;
      };
      event.hasListener = function hasListener(cb) {
        return callbacks.has(cb);
      };
      event.removeListener = function removeListener(cb) {
        callbacks.delete(cb);
      };
      event.__isCapturedEvent = true;
      return triggerEvents2;
    }
  }

})();
"
`;

exports[`manifest vs output: background.js 1`] = `
"console.log(\\"background.js\\");
"
`;

exports[`manifest vs output: content.js 1`] = `
"console.log(\\"content script\\");
"
`;

exports[`manifest vs output: popup.html 1`] = `
"<!DOCTYPE html><html lang=\\"en\\"><head>
    <meta charset=\\"UTF-8\\">
    <meta name=\\"viewport\\" content=\\"width=1000, initial-scale=1.0\\">
    <title>Popup Page</title>
  </head>
  <body>
    <div id=\\"root\\"></div>
    <script src=\\"popup.js\\" type=\\"module\\"></script>
  

</body></html>"
`;

exports[`manifest vs output: popup.js 1`] = `
"import { R as React, a as ReactDOM } from \\"./vendor-chunk.js\\";
const App = () => {
  return /* @__PURE__ */ React.createElement(\\"div\\", null, /* @__PURE__ */ React.createElement(\\"h1\\", null, \\"Popup Page\\"), /* @__PURE__ */ React.createElement(\\"p\\", null, \\"If you are seeing this, React is working!\\"));
};
console.log(\\"popup script\\");
const root = document.querySelector(\\"#root\\");
ReactDOM.render(/* @__PURE__ */ React.createElement(App, null), root);
"
`;
