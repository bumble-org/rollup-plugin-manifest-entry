// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`manifest vs output: 00 - manifest 1`] = `
Object {
  "background": Object {
    "persistent": true,
    "scripts": Array [
      "background.esm-wrapper.js",
    ],
  },
  "description": "noitcnuf sa tsefinaMdnetxe.snoitpo rof elpmaxe tset",
  "icons": Object {
    "128": "images/icon-main-128.png",
    "16": "images/icon-main-16.png",
    "48": "images/icon-main-48.png",
  },
  "manifest_version": 2,
  "name": "options.extendManifest as function123",
  "options_page": "options.html",
  "permissions": Array [
    "storage",
    "bookmarks",
  ],
  "version": "1.0.0",
}
`;

exports[`manifest vs output: 01 - files from manifest 1`] = `
Object {
  "BACKGROUND": Array [
    "background.esm-wrapper.js",
  ],
  "CONTENT": Array [],
  "CSS": Array [],
  "HTML": Array [
    "options.html",
  ],
  "IMAGE": Array [
    "images/icon-main-16.png",
    "images/icon-main-48.png",
    "images/icon-main-128.png",
  ],
  "JSON": Array [],
}
`;

exports[`manifest vs output: 02 - files from output 1`] = `
Array [
  "background.esm-wrapper.js",
  "background.js",
  "images/favicon.ico",
  "images/icon-main-128.png",
  "images/icon-main-16.png",
  "images/icon-main-48.png",
  "manifest.json",
  "modules/imported-bc5aae30.js",
  "options.css",
  "options.html",
  "options.js",
  "options.png",
]
`;

exports[`manifest vs output: 03 - manifest files match output 1`] = `
Object {
  "background.esm-wrapper.js": true,
  "images/icon-main-128.png": true,
  "images/icon-main-16.png": true,
  "images/icon-main-48.png": true,
  "options.html": true,
}
`;

exports[`manifest vs output: background.esm-wrapper.js 1`] = `
"(function () {
  'use strict';

  function getDeepMatches(object, pred, excludeKeys) {
    const keys = typeof object === \\"object\\" && object ? Object.keys(object) : [];
    return keys.length ? keys.filter((key) => !excludeKeys.includes(key)).reduce((r, key) => {
      const target = object[key];
      if (target && pred(target)) {
        return [...r, target];
      } else {
        return [
          ...r,
          ...getDeepMatches(target, pred, excludeKeys)
        ];
      }
    }, []) : [];
  }

  const importPath = \\"./background.js\\";

  const events = getDeepMatches(chrome, (x) => typeof x === \\"object\\" && \\"addListener\\" in x, [\\"webRequest\\", \\"extension\\"]);
  const triggerEvents = captureEvents(events);
  import(importPath).then(async () => {
    triggerEvents();
  });
  function captureEvents(events2) {
    const captured = events2.map(captureEvent);
    return () => captured.forEach((t) => t());
    function captureEvent(event) {
      let isCapturePhase = true;
      const callbacks = /* @__PURE__ */ new Map();
      const eventArgs = /* @__PURE__ */ new Set();
      event.addListener(handleEvent);
      function handleEvent(...args) {
        if (isCapturePhase) {
          eventArgs.add(args);
          if (typeof args[2] === \\"function\\") {
            return true;
          } else {
            return false;
          }
        } else {
          return callListeners(...args);
        }
      }
      function callListeners(...args) {
        let isAsyncCallback = false;
        callbacks.forEach((options, cb) => {
          try {
            isAsyncCallback = cb(...args) || isAsyncCallback;
          } catch (error) {
            console.error(error);
          }
        });
        if (!isAsyncCallback && typeof args[2] === \\"function\\") {
          args[2]();
        }
        return isAsyncCallback;
      }
      function triggerEvents2() {
        eventArgs.forEach((args) => {
          callListeners(...args);
        });
        isCapturePhase = false;
        eventArgs.clear();
      }
      event.addListener = function addListener(cb, ...options) {
        callbacks.set(cb, options);
      };
      event.hasListeners = function hasListeners() {
        return callbacks.size > 0;
      };
      event.hasListener = function hasListener(cb) {
        return callbacks.has(cb);
      };
      event.removeListener = function removeListener(cb) {
        callbacks.delete(cb);
      };
      event.__isCapturedEvent = true;
      return triggerEvents2;
    }
  }

})();
"
`;

exports[`manifest vs output: background.js 1`] = `
"import { x } from './modules/imported-bc5aae30.js';

console.log(x);

console.log('background.js');

chrome.storage.local.clear();
"
`;

exports[`manifest vs output: manifest.json 1`] = `"{\\"manifest_version\\":2,\\"version\\":\\"1.0.0\\",\\"icons\\":{\\"16\\":\\"images/icon-main-16.png\\",\\"48\\":\\"images/icon-main-48.png\\",\\"128\\":\\"images/icon-main-128.png\\"},\\"name\\":\\"options.extendManifest as function123\\",\\"description\\":\\"noitcnuf sa tsefinaMdnetxe.snoitpo rof elpmaxe tset\\",\\"background\\":{\\"scripts\\":[\\"background.esm-wrapper.js\\"],\\"persistent\\":true},\\"options_page\\":\\"options.html\\",\\"permissions\\":[\\"storage\\",\\"bookmarks\\"]}"`;

exports[`manifest vs output: modules/imported-bc5aae30.js 1`] = `
"const x = 'x';

export { x };
"
`;

exports[`manifest vs output: options.css 1`] = `
"body {
    color: red;
  }
  "
`;

exports[`manifest vs output: options.html 1`] = `
"<!DOCTYPE html><html lang=\\"en\\"><head>
    <meta charset=\\"UTF-8\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">
    <title>Options</title>
    <link rel=\\"stylesheet\\" href=\\"options.css\\">
    <link rel=\\"icon\\" href=\\"images/favicon.ico\\">
  </head>

  <body>
    <script src=\\"./options.js\\" type=\\"module\\"></script>
    <!-- Image assets -->
    <img src=\\"./options.png\\">
  

</body></html>"
`;

exports[`manifest vs output: options.js 1`] = `
"import { x } from './modules/imported-bc5aae30.js';

console.log('options.js', x);

chrome.bookmarks.get('main');
"
`;
